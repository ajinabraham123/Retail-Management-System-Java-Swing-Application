/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerServiceUserWorkArea;

import Model.EcoSystem;
import Model.Enterprise.Enterprise;
import Model.RetailEmployment.Department;
import Model.RetailEmployment.Agent;
import Model.Location.Location;
import Model.Organization.QueryDepartmentOrganization;
import Model.Organization.AgentOrganization;
import Model.Organization.EmergencyOrganization;
import Model.Organization.Organization;
import Model.UserAccount.UserAccount;
import Model.WorkQueue.DepartmentWorkRequest;
import Model.WorkQueue.AgentWorkRequest;
import Model.WorkQueue.EmergencyCustomerRequest;
import Model.WorkQueue.WorkRequest;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author siddhisawant
 */
public class CustomerServiceAdminWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form CustomerServiceAdminWorkArea
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem system;
    Organization organization;
    Location network;
    UserAccount account;
    EmergencyCustomerRequest emergencyCustomerReq;
    EmergencyOrganization emergencyOrg; 
    public CustomerServiceAdminWorkArea(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Location network, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = business;
        this.organization = organization;
        this.network = network;
        this.account = account;
        
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof EmergencyCustomerRequest) {
               
                 emergencyCustomerReq = (EmergencyCustomerRequest)wr;
            }
        }
        
        populateTable();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) WorkRequestTable.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof EmergencyCustomerRequest) {
                
                    EmergencyCustomerRequest epr = (EmergencyCustomerRequest)wr;
                    if(epr.getAcceptedUser() == null || epr.getAcceptedUser().getUsername().equals(account.getUsername()))
                    {

                    Object[] row = new Object[model.getColumnCount()];
                    row[0] = epr;
                    row[1] = epr.getCustomer().getCustomerName();//epr.getSender().getEmployee().getName();
                    row[2] = epr.getCustomer().getCustomerName();
                    row[3] = epr.getCustomer().getAddress();
                    row[4] = epr.getCriticality();
                    row[5] = epr.getStatus();// epr.getRequestdate();
                    row[6] = epr.getRequestDate();
                    row[7] = epr.getCustomer().getPhoneNumber();
                    row[8] = epr.getEmergecyAgent() != null ? epr.getEmergecyAgent() : "" ;
                    row[9] = epr.getDepartment();
                    model.addRow(row);
                    }
            }
            
        }
    
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        WorkRequestTable = new javax.swing.JTable();
        btnAcknowledge = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnCompleteRequest = new javax.swing.JButton();
        btnAssigAgen = new javax.swing.JButton();
        btnADepartment = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        WorkRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequestId", "Sender", "Customer Name", "Customer Address", "Urgency", "Status", "Request Date", "Phone Number", "Agent Name", "Department"
            }
        ));
        WorkRequestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WorkRequestTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(WorkRequestTable);

        btnAcknowledge.setText("Accept Request");
        btnAcknowledge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcknowledgeActionPerformed(evt);
            }
        });

        btnReject.setText("Reject Request");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnProcess.setText("Process Request");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnCompleteRequest.setText("Complete Request");
        btnCompleteRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteRequestActionPerformed(evt);
            }
        });

        btnAssigAgen.setText("Assign Agent");
        btnAssigAgen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigAgenActionPerformed(evt);
            }
        });

        btnADepartment.setText("Assigned Department ");
        btnADepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADepartmentActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("CUSTOMER SERVICE ADMIN WORK AREA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnAcknowledge)
                        .addGap(20, 20, 20)
                        .addComponent(btnADepartment)
                        .addGap(20, 20, 20)
                        .addComponent(btnAssigAgen, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnReject)
                        .addGap(20, 20, 20)
                        .addComponent(btnProcess)
                        .addGap(20, 20, 20)
                        .addComponent(btnCompleteRequest))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1046, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAcknowledge)
                    .addComponent(btnReject)
                    .addComponent(btnProcess)
                    .addComponent(btnCompleteRequest)
                    .addComponent(btnAssigAgen)
                    .addComponent(btnADepartment))
                .addContainerGap(496, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcknowledgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcknowledgeActionPerformed
          int count = WorkRequestTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyCustomerRequest emerReq = (EmergencyCustomerRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            
            System.out.println(emerReq.getStatus());
            
            if(emerReq.getStatus().equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStatus().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Assigned Department")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Department");
            }else if(emerReq.getStatus().equals("Assigned Agent")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Agent");
            }            
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStatus("Accepted");
                System.out.println("Accepted uSer" +account.getUsername() );
                emerReq.setAcceptedUser(account);
                emerReq.setMessage(msg);
                }
                populateTable();
            }
            //emerReq.setStatus("Accepted");
        }
    }//GEN-LAST:event_btnAcknowledgeActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
       int count = WorkRequestTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyCustomerRequest emerReq = (EmergencyCustomerRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            if(emerReq.getStatus().equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStatus().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted and Processing");
            }else if(emerReq.getStatus().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Assigned Department")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Department");
            }else if(emerReq.getStatus().equals("Assigned Agent")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Agent");
            }             
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStatus("Rejected");
                emerReq.setMessage(msg);
                }
                populateTable();
            }
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        int count = WorkRequestTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyCustomerRequest emerReq = (EmergencyCustomerRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getDepartment() == null || emerReq.getEmergecyAgent() == null)
            {
                 JOptionPane.showMessageDialog(null, "Request is not yet Assigned to Agent or Department, So it can not be processed");
            }
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");     
                  if(msg != null)
                {
                emerReq.setStatus("Processing");
                emerReq.setMessage(msg);
                }
                populateTable();
            }            
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnCompleteRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteRequestActionPerformed
        int count = WorkRequestTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyCustomerRequest emerReq = (EmergencyCustomerRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            String childStatus = "";
         
            Organization doctorOrg = null;
         for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
        {
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof AgentOrganization ) {

                   doctorOrg = organization;
                   break;
               }
           }
        }
        for(Agent doc : system.getAgentDirectory().getAgentList())
            {
               if(doc.getAgentName().equals(emergencyCustomerReq.getEmergecyAgent().getAgentName()))
               {
                   for(UserAccount ua : doctorOrg.getUserAccountDirectory().getUserAccountList())
                   {
                       if(ua.getEmployee().getName().equals(emergencyCustomerReq.getEmergecyAgent().getAgentName()))
                       {
                            for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                if(wr instanceof AgentWorkRequest) {

                                    AgentWorkRequest epr = (AgentWorkRequest)wr;
                                    childStatus = epr.getStatus();
                                }
                            }
                       }
                   }
               }
            }
            
         Organization ambulanceOrg = null;
         for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
         {
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof QueryDepartmentOrganization ) {

                   ambulanceOrg = organization;
                   break;
               }
           }
        }
         
          for(Department amb : system.getDepartmentDirectory().getdepartmentList())
            {
               if(amb.getdepartmentNumber().equals(emergencyCustomerReq.getDepartment().getdepartmentNumber()))
               {
                   for(UserAccount ua : ambulanceOrg.getUserAccountDirectory().getUserAccountList())
                   {
                       if(ua.getEmployee().getName().equals(emergencyCustomerReq.getDepartment().getagentName()))
                       {
                            for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                if(wr instanceof DepartmentWorkRequest) {

                                    DepartmentWorkRequest epr = (DepartmentWorkRequest)wr;
                                    childStatus = epr.getStatus();
                                }
                            }
                       }
                   }
                   
               }
            }
            
            
            System.out.println("Child Status" + childStatus);
//           
                if(!childStatus.equals("Completed")) {
                JOptionPane.showMessageDialog(null, "All the Request is not yet Completed");
            }else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setResolveDate(new Date());
                emerReq.setStatus("Completed");
                emerReq.setMessage(msg);
                }
                populateTable();
            }
        }
    }//GEN-LAST:event_btnCompleteRequestActionPerformed

    private void btnAssigAgenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigAgenActionPerformed
        // TODO add your handling code here:
        
         int count = WorkRequestTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyCustomerRequest emerReq = (EmergencyCustomerRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getStatus().equals("Assigned Agent")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Agent");
            }
            else {
                
                
               if(emergencyCustomerReq.getEmergecyAgent() == null)
               {
                   
                   Organization agentOrg = null;
                     for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
                    {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                           if (organization instanceof AgentOrganization ) {

                               agentOrg = organization;
                               break;
                           }
                       }
                    }
                   
                    int size = system.getAgentDirectory().getAgentList().size();
                    String[] AgentList = new String[size+1]; ;
                    int i= 0;
                    AgentList[i] = "Select";
                    i++;
                    int availableCount = 0;
                    for(Agent agent : system.getAgentDirectory().getAgentList())
                    {
                        if(agent.getEmergencyAgent())
                        {
                            for(Agent agn : system.getAgentDirectory().getAgentList())
                        {
                           if(agn.getAgentName().equals(agent.getAgentName()))
                           {
                               for(UserAccount ua : agentOrg.getUserAccountDirectory().getUserAccountList())
                               {
                                   if(ua.getEmployee().getName().equals(agent.getAgentName()))
                                   {
                                       for(WorkRequest wr : ua.getWorkQueue().getWorkRequestList())
                                       {
                                           if(wr instanceof  AgentWorkRequest)
                                           {
                                               AgentWorkRequest dwr = (AgentWorkRequest)wr;
                                               {
                                                   if(!dwr.getStatus().equals("Completed"))
                                                   {
                                                       availableCount++;
                                                        AgentList[i] = agent.getAgentName();
                                                        i++;
                                                       
                                                   }
                                                   else
                                                   {
                                                       // JOptionPane.showMessageDialog(null, "There is already request inprogress for this agent");
                                                   }
                                               }
                                           }
                                       }
                                   }
                               }
                           }
                        }
                            
                            if(availableCount < 1)
                            {
                            AgentList[i] = agent.getAgentName();
                            i++;
                            }
                        }
                    }
                        

                     final JComboBox<String> combo = new JComboBox<>(AgentList);

                    String[] options = { "OK", "Cancel" };

                    String title = "Title";
                    int selection = JOptionPane.showOptionDialog(null, combo, title,
                          JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                          options, options[0]);

                    if (selection > 0) {
                       System.out.println("Agent is: " + options[selection]);
                    }
                     

                    Object agentName = combo.getSelectedItem();
                    if(!agentName.equals("Select"))
                    {

                    for(Agent doc : system.getAgentDirectory().getAgentList())
                        {
                           if(doc.getAgentName().equals(agentName))
                           {
                               for(UserAccount ua : agentOrg.getUserAccountDirectory().getUserAccountList())
                               {
                                   if(ua.getEmployee().getName().equals(agentName))
                                   {
                                       
                                       System.out.println(agentName + "Word Requet ");
                                       emergencyCustomerReq.setEmergencyAgent(doc);
                                       AgentWorkRequest agentwrkReq = new AgentWorkRequest();
                                       agentwrkReq.setCustomer(emergencyCustomerReq.getCustomer());
                                       agentwrkReq.setEmergencyAgent(doc);
                                       agentwrkReq.setRequestdate(new Date());
                                       agentwrkReq.setSenderNetwork(network);
                                       agentwrkReq.setSenderOrganization(organization);
                                       agentwrkReq.setRecieverOrganization(agentOrg);
                                       agentwrkReq.setCriticality(emergencyCustomerReq.getCriticality());
                                       agentwrkReq.setStatus("Assigned Agent");
                                       agentwrkReq.setEmergencyCustomerRequest(emergencyCustomerReq);
                                       ua.getWorkQueue().addWorkRequest(agentwrkReq);
                                   }
                               }
            //                   account.getWorkQueue().addWorkRequest(emergencyCustomerReq);

                           }
                        }

                    emergencyCustomerReq.setStatus("Assigned Agent");
                     populateTable();
                   }
                }
               else
               {
                    JOptionPane.showMessageDialog(null, "Request is already Assigned to Agent");
               }
            }
        }
    }//GEN-LAST:event_btnAssigAgenActionPerformed

    private void btnADepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADepartmentActionPerformed
        // TODO add your handling code here:
         int count = WorkRequestTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyCustomerRequest emerReq = (EmergencyCustomerRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            System.out.println(emerReq.getStatus());
            if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getStatus().equals("Assigned Department")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Department");
            }
           else {
                
             if(emergencyCustomerReq.getDepartment() == null)
             {
                 

                
                int size = system.getDepartmentDirectory().getdepartmentList().size();
                String[] departmentList = new String[size+1]; ;
                int i= 0;
                departmentList[i] = "Select";
                i++;
                for(Department ambulance : system.getDepartmentDirectory().getdepartmentList())
                {
                    departmentList[i] = String.valueOf(ambulance.getdepartmentNumber());
                    i++;
                }

                 final JComboBox<String> combo = new JComboBox<>(departmentList);

                String[] options = { "OK", "Cancel" };

                String title = "Title";
                int selection = JOptionPane.showOptionDialog(null, combo, title,
                      JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                      options, options[0]);

                if (selection > 0) {
                   System.out.println("Department is: " + options[selection]);
                }
                if(!options[selection].equals("Cancel"))
                {
                        Organization departmentOrg = null;
                        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
                       {
                           for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                              if (organization instanceof QueryDepartmentOrganization ) {

                                  departmentOrg = organization;
                                  break;
                              }
                          }
                       }

                       Object departmentName = combo.getSelectedItem();

                       for(Department department : system.getDepartmentDirectory().getdepartmentList())
                           {
                               System.out.println(departmentName + "Word Requet 1");
                              if(department.getdepartmentNumber().equals(departmentName))
                              {
                                    System.out.println(departmentName + "Word Requet 2");
                                  for(UserAccount ua : departmentOrg.getUserAccountDirectory().getUserAccountList())
                                  {
                                      if(ua.getEmployee().getName().equals(department.getagentName()))
                                      {
                                          System.out.println(departmentName + "Word Requet 3 ");
                                          //emergencyPatientReq.etEmergencyDoctor(agn);
                                          DepartmentWorkRequest ambulancewrkReq = new DepartmentWorkRequest();
                                          ambulancewrkReq.setCustomer(emergencyCustomerReq.getCustomer());
                                          ambulancewrkReq.setEmergencyAgent(emergencyCustomerReq.getEmergecyAgent());
                                          ambulancewrkReq.setRequestdate(new Date());
                                          ambulancewrkReq.setSenderNetwork(network);
                                          ambulancewrkReq.setSenderOrganization(organization);
                                          ambulancewrkReq.setRecieverOrganization(departmentOrg);
                                          ambulancewrkReq.setCriticality(emergencyCustomerReq.getCriticality());
                                          ambulancewrkReq.setStatus("Requested");
                                          emergencyCustomerReq.setDepartment(department);
                                          ambulancewrkReq.setReceiver(ua);
                                          ambulancewrkReq.setDepartment(department);
                                          ambulancewrkReq.setEmergencyPatientRequest(emergencyCustomerReq);
                                          ua.getWorkQueue().addWorkRequest(ambulancewrkReq);
                                            emergencyCustomerReq.setStatus("Assigned");
                                             populateTable();
                                          return;
                                      }
                                  }
               //                   account.getWorkQueue().addWorkRequest(emergencyCustomerReq);

                              }
                           }

                                  
                        }
                }
             else
             {
                  JOptionPane.showMessageDialog(null, "Request is already Assigned for Department");
             }
       }
      }
    }//GEN-LAST:event_btnADepartmentActionPerformed

    private void WorkRequestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WorkRequestTableMouseClicked
        // TODO add your handling code here:
         int selectedReq = WorkRequestTable.getSelectedRow();
        if(selectedReq >= 0){
        EmergencyCustomerRequest selectedWorkReq = (EmergencyCustomerRequest)WorkRequestTable.getValueAt(selectedReq, 0);
       // populateChildTable(selectedWorkReq);
        }
    }//GEN-LAST:event_WorkRequestTableMouseClicked

    
      
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable WorkRequestTable;
    private javax.swing.JButton btnADepartment;
    private javax.swing.JButton btnAcknowledge;
    private javax.swing.JButton btnAssigAgen;
    private javax.swing.JButton btnCompleteRequest;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
