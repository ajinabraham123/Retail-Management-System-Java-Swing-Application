/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Model.EcoSystem;
import Model.Enterprise.Enterprise;
import Model.Product.Product;
import Model.RetailEmployment.Customer;
import Model.RetailEmployment.CustomerList;
import Model.Location.Location;
import Model.Organization.EmergencyOrganization;
import Model.Organization.Organization;
import Model.WorkQueue.EmergencyCustomerRequest;
import Model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import userinterface.Charts.PieChartJPanel;

/**
 *
 * @author Sandeep
 */
  
public class ChartsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ChartsJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    public ChartsJPanel(JPanel userProcessContainer,EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setText("PieChart  of Products");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 190, 491, 122));

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 90, 0, 122));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultPieDataset dataset=new DefaultPieDataset();  
        for(Product equipment : ecosystem.getEquipmentList().getproductList())
        {
             dataset.setValue(equipment.getproductName(),  Double.parseDouble(equipment.getAvailableQuant()));  
        }
        
         
//        dataset.setValue("80-100",  120);  
//        dataset.setValue("60-79", 80);  
//        dataset.setValue("40-59", 20);  
//        dataset.setValue("20-39", 7);  
//        dataset.setValue("0-19", 3);   
        
         JFreeChart chart = ChartFactory.createPieChart(  
        "Product Availability Chart",  
        dataset,  
        true,   
        true,  
        false);  
         PieSectionLabelGenerator labelGenerator = new StandardPieSectionLabelGenerator(  
        "Product {0} : ({1})", new DecimalFormat("0"), new DecimalFormat("0"));  
         
    ((PiePlot) chart.getPlot()).setLabelGenerator(labelGenerator);  
    
          ChartFrame chartFrame = new ChartFrame("Products",chart,true);
        chartFrame.setVisible(true);
        chartFrame.setSize(1000,550);
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        int Requestcount = 0;
        int ResolveCount = 0;
        int inProgressCount = 0;
          Organization Emeorg = null;
        for(Location network : ecosystem.getLocationList())
        {
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())  
            {
              for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                  if(organization instanceof EmergencyOrganization)
                  {
                         Emeorg = organization;
                         for(WorkRequest wr : Emeorg.getWorkQueue().getWorkRequestList())
                         {
                             if(wr instanceof EmergencyCustomerRequest)
                             {
                                 EmergencyCustomerRequest epr = (EmergencyCustomerRequest) wr;
                                 if(!epr.getStatus().equals("Completed"))
                                 {
                                     inProgressCount++;
                                 }
                                 else
                                 {
                                     ResolveCount++;
                                 }
                             }
                             
                         }
                     }
                 }
            }
        }
        
        

        // Population in 2005
        dataset.addValue(inProgressCount, "Inprogress", "Inprogress");
        dataset.addValue(ResolveCount, "Completed", "Completed");
//        dataset.addValue(20, "China", "2005");
//
//        // Population in 2010
//        dataset.addValue(15, "USA", "2010");
//        dataset.addValue(20, "India", "2010");
//        dataset.addValue(25, "China", "2010");
//
//        // Population in 2015
//        dataset.addValue(20, "USA", "2015");
//        dataset.addValue(25, "India", "2015");
//        dataset.addValue(30, "China", "2016");

        JFreeChart chart=ChartFactory.createBarChart(
            "Product Request Report", //Chart Title
            "Request", // Category axis
            "Number of Request", // Value axis
            dataset,
            PlotOrientation.VERTICAL,
            true,true,false
        );
        ChartFrame chartFrame = new ChartFrame("Prodcuts",chart,true);
        chartFrame.setVisible(true);
        chartFrame.setSize(2000,1000);
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
